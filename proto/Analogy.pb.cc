// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Analogy.proto

#include "Analogy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Analogy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_Analogy_2eproto;
namespace greet {
class AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse> _instance;
} _AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_default_instance_;
class AnalogyGRPCLogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogyGRPCLogMessage> _instance;
} _AnalogyGRPCLogMessage_default_instance_;
class AnalogyMessageReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogyMessageReply> _instance;
} _AnalogyMessageReply_default_instance_;
class AnalogyConsumerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogyConsumerMessage> _instance;
} _AnalogyConsumerMessage_default_instance_;
}  // namespace greet
static void InitDefaultsscc_info_AnalogyConsumerMessage_Analogy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::greet::_AnalogyConsumerMessage_default_instance_;
    new (ptr) ::greet::AnalogyConsumerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::greet::AnalogyConsumerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogyConsumerMessage_Analogy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnalogyConsumerMessage_Analogy_2eproto}, {}};

static void InitDefaultsscc_info_AnalogyGRPCLogMessage_Analogy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::greet::_AnalogyGRPCLogMessage_default_instance_;
    new (ptr) ::greet::AnalogyGRPCLogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::greet::AnalogyGRPCLogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnalogyGRPCLogMessage_Analogy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnalogyGRPCLogMessage_Analogy_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_Analogy_2eproto.base,}};

static void InitDefaultsscc_info_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_Analogy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::greet::_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_default_instance_;
    new (ptr) ::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse();
  }
  ::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_Analogy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_Analogy_2eproto}, {}};

static void InitDefaultsscc_info_AnalogyMessageReply_Analogy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::greet::_AnalogyMessageReply_default_instance_;
    new (ptr) ::greet::AnalogyMessageReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::greet::AnalogyMessageReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogyMessageReply_Analogy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnalogyMessageReply_Analogy_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Analogy_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Analogy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Analogy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Analogy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, text_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, level_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, date_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, processid_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, threadid_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, module_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, source_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, methodname_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, filename_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, linenumber_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, machinename_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, category_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, user_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, additionalinformation_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, id_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyGRPCLogMessage, class__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyMessageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyMessageReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyConsumerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyConsumerMessage, message_),
  PROTOBUF_FIELD_OFFSET(::greet::AnalogyConsumerMessage, streamoldmessages_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse)},
  { 9, -1, sizeof(::greet::AnalogyGRPCLogMessage)},
  { 30, -1, sizeof(::greet::AnalogyMessageReply)},
  { 36, -1, sizeof(::greet::AnalogyConsumerMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::greet::_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::greet::_AnalogyGRPCLogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::greet::_AnalogyMessageReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::greet::_AnalogyConsumerMessage_default_instance_),
};

const char descriptor_table_protodef_Analogy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rAnalogy.proto\022\005greet\032\037google/protobuf/"
  "timestamp.proto\"\373\003\n\025AnalogyGRPCLogMessag"
  "e\022\014\n\004Text\030\001 \001(\t\022)\n\005Level\030\002 \001(\0162\032.greet.A"
  "nalogyGRPCLogLevel\022(\n\004Date\030\003 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\021\n\tProcessId\030\004 \001(\005\022"
  "\020\n\010ThreadId\030\005 \001(\005\022\016\n\006Module\030\006 \001(\t\022\016\n\006Sou"
  "rce\030\007 \001(\t\022\022\n\nMethodName\030\010 \001(\t\022\020\n\010FileNam"
  "e\030\t \001(\t\022\022\n\nLineNumber\030\n \001(\005\022\023\n\013MachineNa"
  "me\030\013 \001(\t\022\020\n\010Category\030\014 \001(\t\022\014\n\004User\030\r \001(\t"
  "\022V\n\025AdditionalInformation\030\016 \003(\01327.greet."
  "AnalogyGRPCLogMessage.AdditionalInformat"
  "ionEntry\022\n\n\002Id\030\017 \001(\t\022)\n\005Class\030\020 \001(\0162\032.gr"
  "eet.AnalogyGRPCLogClass\032<\n\032AdditionalInf"
  "ormationEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\"&\n\023AnalogyMessageReply\022\017\n\007message\030"
  "\001 \001(\t\"D\n\026AnalogyConsumerMessage\022\017\n\007messa"
  "ge\030\001 \001(\t\022\031\n\021streamOldMessages\030\002 \001(\010*E\n\023A"
  "nalogyGRPCLogClass\022\013\n\007GENERAL\020\000\022\014\n\010SECUR"
  "ITY\020\001\022\n\n\006HAZARD\020\002\022\007\n\003PHI\020\003*\223\001\n\023AnalogyGR"
  "PCLogLevel\022\013\n\007UNKNOWN\020\000\022\t\n\005TRACE\020\001\022\013\n\007VE"
  "RBOSE\020\002\022\t\n\005DEBUG\020\003\022\017\n\013INFORMATION\020\004\022\013\n\007W"
  "ARNING\020\005\022\t\n\005ERROR\020\006\022\014\n\010CRITICAL\020\007\022\013\n\007ANA"
  "LOGY\020\010\022\010\n\004NONE\020\t2\307\001\n\007Analogy\022\\\n\036Subscrib"
  "eForPublishingMessages\022\034.greet.AnalogyGR"
  "PCLogMessage\032\032.greet.AnalogyMessageReply"
  "(\001\022^\n\035SubscribeForConsumingMessages\022\035.gr"
  "eet.AnalogyConsumerMessage\032\034.greet.Analo"
  "gyGRPCLogMessage0\001B\024\252\002\021Analogy.LogServer"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Analogy_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Analogy_2eproto_sccs[4] = {
  &scc_info_AnalogyConsumerMessage_Analogy_2eproto.base,
  &scc_info_AnalogyGRPCLogMessage_Analogy_2eproto.base,
  &scc_info_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_Analogy_2eproto.base,
  &scc_info_AnalogyMessageReply_Analogy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Analogy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Analogy_2eproto = {
  false, false, descriptor_table_protodef_Analogy_2eproto, "Analogy.proto", 1128,
  &descriptor_table_Analogy_2eproto_once, descriptor_table_Analogy_2eproto_sccs, descriptor_table_Analogy_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_Analogy_2eproto::offsets,
  file_level_metadata_Analogy_2eproto, 4, file_level_enum_descriptors_Analogy_2eproto, file_level_service_descriptors_Analogy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Analogy_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Analogy_2eproto)), true);
namespace greet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogyGRPCLogClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Analogy_2eproto);
  return file_level_enum_descriptors_Analogy_2eproto[0];
}
bool AnalogyGRPCLogClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogyGRPCLogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Analogy_2eproto);
  return file_level_enum_descriptors_Analogy_2eproto[1];
}
bool AnalogyGRPCLogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse() {}
AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::MergeFrom(const AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AnalogyGRPCLogMessage::InitAsDefaultInstance() {
  ::greet::_AnalogyGRPCLogMessage_default_instance_._instance.get_mutable()->date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class AnalogyGRPCLogMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date(const AnalogyGRPCLogMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
AnalogyGRPCLogMessage::_Internal::date(const AnalogyGRPCLogMessage* msg) {
  return *msg->date_;
}
void AnalogyGRPCLogMessage::clear_date() {
  if (GetArena() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
}
AnalogyGRPCLogMessage::AnalogyGRPCLogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additionalinformation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:greet.AnalogyGRPCLogMessage)
}
AnalogyGRPCLogMessage::AnalogyGRPCLogMessage(const AnalogyGRPCLogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  additionalinformation_.MergeFrom(from.additionalinformation_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module().empty()) {
    module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_module(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  methodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_methodname().empty()) {
    methodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_methodname(),
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  machinename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machinename().empty()) {
    machinename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_machinename(),
      GetArena());
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category().empty()) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_category(),
      GetArena());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_date()) {
    date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_);
  } else {
    date_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&class__) -
    reinterpret_cast<char*>(&level_)) + sizeof(class__));
  // @@protoc_insertion_point(copy_constructor:greet.AnalogyGRPCLogMessage)
}

void AnalogyGRPCLogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogyGRPCLogMessage_Analogy_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  methodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machinename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class__) -
      reinterpret_cast<char*>(&date_)) + sizeof(class__));
}

AnalogyGRPCLogMessage::~AnalogyGRPCLogMessage() {
  // @@protoc_insertion_point(destructor:greet.AnalogyGRPCLogMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogyGRPCLogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  methodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machinename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
}

void AnalogyGRPCLogMessage::ArenaDtor(void* object) {
  AnalogyGRPCLogMessage* _this = reinterpret_cast< AnalogyGRPCLogMessage* >(object);
  (void)_this;
}
void AnalogyGRPCLogMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogyGRPCLogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogyGRPCLogMessage& AnalogyGRPCLogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogyGRPCLogMessage_Analogy_2eproto.base);
  return *internal_default_instance();
}


void AnalogyGRPCLogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:greet.AnalogyGRPCLogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additionalinformation_.Clear();
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  methodname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machinename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class__) -
      reinterpret_cast<char*>(&level_)) + sizeof(class__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogyGRPCLogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.Text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .greet.AnalogyGRPCLogLevel Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::greet::AnalogyGRPCLogLevel>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp Date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProcessId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ThreadId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          threadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Module = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.Module"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.Source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MethodName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_methodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.MethodName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FileName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.FileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LineNumber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          linenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MachineName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_machinename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.MachineName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Category = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.Category"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string User = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.User"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> AdditionalInformation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&additionalinformation_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // string Id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyGRPCLogMessage.Id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .greet.AnalogyGRPCLogClass Class = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_class_(static_cast<::greet::AnalogyGRPCLogClass>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogyGRPCLogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greet.AnalogyGRPCLogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.Text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .greet.AnalogyGRPCLogLevel Level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // .google.protobuf.Timestamp Date = 3;
  if (this->has_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date(this), target, stream);
  }

  // int32 ProcessId = 4;
  if (this->processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_processid(), target);
  }

  // int32 ThreadId = 5;
  if (this->threadid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_threadid(), target);
  }

  // string Module = 6;
  if (this->module().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.Module");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_module(), target);
  }

  // string Source = 7;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.Source");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_source(), target);
  }

  // string MethodName = 8;
  if (this->methodname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_methodname().data(), static_cast<int>(this->_internal_methodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.MethodName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_methodname(), target);
  }

  // string FileName = 9;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.FileName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_filename(), target);
  }

  // int32 LineNumber = 10;
  if (this->linenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_linenumber(), target);
  }

  // string MachineName = 11;
  if (this->machinename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machinename().data(), static_cast<int>(this->_internal_machinename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.MachineName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_machinename(), target);
  }

  // string Category = 12;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.Category");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_category(), target);
  }

  // string User = 13;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.User");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_user(), target);
  }

  // map<string, string> AdditionalInformation = 14;
  if (!this->_internal_additionalinformation().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "greet.AnalogyGRPCLogMessage.AdditionalInformationEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "greet.AnalogyGRPCLogMessage.AdditionalInformationEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_additionalinformation().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_additionalinformation().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_additionalinformation().begin();
          it != this->_internal_additionalinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_additionalinformation().begin();
          it != this->_internal_additionalinformation().end(); ++it) {
        target = AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string Id = 15;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyGRPCLogMessage.Id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_id(), target);
  }

  // .greet.AnalogyGRPCLogClass Class = 16;
  if (this->class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_class_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greet.AnalogyGRPCLogMessage)
  return target;
}

size_t AnalogyGRPCLogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greet.AnalogyGRPCLogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> AdditionalInformation = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additionalinformation_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additionalinformation().begin();
      it != this->_internal_additionalinformation().end(); ++it) {
    total_size += AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string Module = 6;
  if (this->module().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module());
  }

  // string Source = 7;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string MethodName = 8;
  if (this->methodname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_methodname());
  }

  // string FileName = 9;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string MachineName = 11;
  if (this->machinename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machinename());
  }

  // string Category = 12;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string User = 13;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string Id = 15;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp Date = 3;
  if (this->has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_);
  }

  // .greet.AnalogyGRPCLogLevel Level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  // int32 ProcessId = 4;
  if (this->processid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processid());
  }

  // int32 ThreadId = 5;
  if (this->threadid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threadid());
  }

  // int32 LineNumber = 10;
  if (this->linenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linenumber());
  }

  // .greet.AnalogyGRPCLogClass Class = 16;
  if (this->class_() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_class_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogyGRPCLogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:greet.AnalogyGRPCLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogyGRPCLogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogyGRPCLogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:greet.AnalogyGRPCLogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:greet.AnalogyGRPCLogMessage)
    MergeFrom(*source);
  }
}

void AnalogyGRPCLogMessage::MergeFrom(const AnalogyGRPCLogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:greet.AnalogyGRPCLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additionalinformation_.MergeFrom(from.additionalinformation_);
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.module().size() > 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.methodname().size() > 0) {
    _internal_set_methodname(from._internal_methodname());
  }
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.machinename().size() > 0) {
    _internal_set_machinename(from._internal_machinename());
  }
  if (from.category().size() > 0) {
    _internal_set_category(from._internal_category());
  }
  if (from.user().size() > 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_date()) {
    _internal_mutable_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  if (from.threadid() != 0) {
    _internal_set_threadid(from._internal_threadid());
  }
  if (from.linenumber() != 0) {
    _internal_set_linenumber(from._internal_linenumber());
  }
  if (from.class_() != 0) {
    _internal_set_class_(from._internal_class_());
  }
}

void AnalogyGRPCLogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:greet.AnalogyGRPCLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogyGRPCLogMessage::CopyFrom(const AnalogyGRPCLogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greet.AnalogyGRPCLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogyGRPCLogMessage::IsInitialized() const {
  return true;
}

void AnalogyGRPCLogMessage::InternalSwap(AnalogyGRPCLogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additionalinformation_.Swap(&other->additionalinformation_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  module_.Swap(&other->module_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  methodname_.Swap(&other->methodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machinename_.Swap(&other->machinename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogyGRPCLogMessage, class__)
      + sizeof(AnalogyGRPCLogMessage::class__)
      - PROTOBUF_FIELD_OFFSET(AnalogyGRPCLogMessage, date_)>(
          reinterpret_cast<char*>(&date_),
          reinterpret_cast<char*>(&other->date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogyGRPCLogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogyMessageReply::InitAsDefaultInstance() {
}
class AnalogyMessageReply::_Internal {
 public:
};

AnalogyMessageReply::AnalogyMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:greet.AnalogyMessageReply)
}
AnalogyMessageReply::AnalogyMessageReply(const AnalogyMessageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:greet.AnalogyMessageReply)
}

void AnalogyMessageReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogyMessageReply_Analogy_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AnalogyMessageReply::~AnalogyMessageReply() {
  // @@protoc_insertion_point(destructor:greet.AnalogyMessageReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogyMessageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnalogyMessageReply::ArenaDtor(void* object) {
  AnalogyMessageReply* _this = reinterpret_cast< AnalogyMessageReply* >(object);
  (void)_this;
}
void AnalogyMessageReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogyMessageReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogyMessageReply& AnalogyMessageReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogyMessageReply_Analogy_2eproto.base);
  return *internal_default_instance();
}


void AnalogyMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:greet.AnalogyMessageReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogyMessageReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyMessageReply.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogyMessageReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greet.AnalogyMessageReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyMessageReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greet.AnalogyMessageReply)
  return target;
}

size_t AnalogyMessageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greet.AnalogyMessageReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogyMessageReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:greet.AnalogyMessageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogyMessageReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogyMessageReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:greet.AnalogyMessageReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:greet.AnalogyMessageReply)
    MergeFrom(*source);
  }
}

void AnalogyMessageReply::MergeFrom(const AnalogyMessageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:greet.AnalogyMessageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void AnalogyMessageReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:greet.AnalogyMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogyMessageReply::CopyFrom(const AnalogyMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greet.AnalogyMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogyMessageReply::IsInitialized() const {
  return true;
}

void AnalogyMessageReply::InternalSwap(AnalogyMessageReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogyMessageReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogyConsumerMessage::InitAsDefaultInstance() {
}
class AnalogyConsumerMessage::_Internal {
 public:
};

AnalogyConsumerMessage::AnalogyConsumerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:greet.AnalogyConsumerMessage)
}
AnalogyConsumerMessage::AnalogyConsumerMessage(const AnalogyConsumerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  streamoldmessages_ = from.streamoldmessages_;
  // @@protoc_insertion_point(copy_constructor:greet.AnalogyConsumerMessage)
}

void AnalogyConsumerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogyConsumerMessage_Analogy_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamoldmessages_ = false;
}

AnalogyConsumerMessage::~AnalogyConsumerMessage() {
  // @@protoc_insertion_point(destructor:greet.AnalogyConsumerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogyConsumerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnalogyConsumerMessage::ArenaDtor(void* object) {
  AnalogyConsumerMessage* _this = reinterpret_cast< AnalogyConsumerMessage* >(object);
  (void)_this;
}
void AnalogyConsumerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogyConsumerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogyConsumerMessage& AnalogyConsumerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogyConsumerMessage_Analogy_2eproto.base);
  return *internal_default_instance();
}


void AnalogyConsumerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:greet.AnalogyConsumerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  streamoldmessages_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogyConsumerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "greet.AnalogyConsumerMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool streamOldMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          streamoldmessages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogyConsumerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greet.AnalogyConsumerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greet.AnalogyConsumerMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool streamOldMessages = 2;
  if (this->streamoldmessages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_streamoldmessages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greet.AnalogyConsumerMessage)
  return target;
}

size_t AnalogyConsumerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greet.AnalogyConsumerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool streamOldMessages = 2;
  if (this->streamoldmessages() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogyConsumerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:greet.AnalogyConsumerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogyConsumerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogyConsumerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:greet.AnalogyConsumerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:greet.AnalogyConsumerMessage)
    MergeFrom(*source);
  }
}

void AnalogyConsumerMessage::MergeFrom(const AnalogyConsumerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:greet.AnalogyConsumerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.streamoldmessages() != 0) {
    _internal_set_streamoldmessages(from._internal_streamoldmessages());
  }
}

void AnalogyConsumerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:greet.AnalogyConsumerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogyConsumerMessage::CopyFrom(const AnalogyConsumerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greet.AnalogyConsumerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogyConsumerMessage::IsInitialized() const {
  return true;
}

void AnalogyConsumerMessage::InternalSwap(AnalogyConsumerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(streamoldmessages_, other->streamoldmessages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogyConsumerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace greet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse* Arena::CreateMaybeMessage< ::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::greet::AnalogyGRPCLogMessage* Arena::CreateMaybeMessage< ::greet::AnalogyGRPCLogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greet::AnalogyGRPCLogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::greet::AnalogyMessageReply* Arena::CreateMaybeMessage< ::greet::AnalogyMessageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greet::AnalogyMessageReply >(arena);
}
template<> PROTOBUF_NOINLINE ::greet::AnalogyConsumerMessage* Arena::CreateMaybeMessage< ::greet::AnalogyConsumerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greet::AnalogyConsumerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
