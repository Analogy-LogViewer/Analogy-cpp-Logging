// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Analogy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Analogy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Analogy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Analogy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Analogy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Analogy_2eproto;
namespace greet {
class AnalogyConsumerMessage;
class AnalogyConsumerMessageDefaultTypeInternal;
extern AnalogyConsumerMessageDefaultTypeInternal _AnalogyConsumerMessage_default_instance_;
class AnalogyGRPCLogMessage;
class AnalogyGRPCLogMessageDefaultTypeInternal;
extern AnalogyGRPCLogMessageDefaultTypeInternal _AnalogyGRPCLogMessage_default_instance_;
class AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse;
class AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUseDefaultTypeInternal;
extern AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUseDefaultTypeInternal _AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_default_instance_;
class AnalogyMessageReply;
class AnalogyMessageReplyDefaultTypeInternal;
extern AnalogyMessageReplyDefaultTypeInternal _AnalogyMessageReply_default_instance_;
}  // namespace greet
PROTOBUF_NAMESPACE_OPEN
template<> ::greet::AnalogyConsumerMessage* Arena::CreateMaybeMessage<::greet::AnalogyConsumerMessage>(Arena*);
template<> ::greet::AnalogyGRPCLogMessage* Arena::CreateMaybeMessage<::greet::AnalogyGRPCLogMessage>(Arena*);
template<> ::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse* Arena::CreateMaybeMessage<::greet::AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse>(Arena*);
template<> ::greet::AnalogyMessageReply* Arena::CreateMaybeMessage<::greet::AnalogyMessageReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greet {

enum AnalogyGRPCLogClass : int {
  GENERAL = 0,
  SECURITY = 1,
  HAZARD = 2,
  PHI = 3,
  AnalogyGRPCLogClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnalogyGRPCLogClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnalogyGRPCLogClass_IsValid(int value);
constexpr AnalogyGRPCLogClass AnalogyGRPCLogClass_MIN = GENERAL;
constexpr AnalogyGRPCLogClass AnalogyGRPCLogClass_MAX = PHI;
constexpr int AnalogyGRPCLogClass_ARRAYSIZE = AnalogyGRPCLogClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogyGRPCLogClass_descriptor();
template<typename T>
inline const std::string& AnalogyGRPCLogClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalogyGRPCLogClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalogyGRPCLogClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnalogyGRPCLogClass_descriptor(), enum_t_value);
}
inline bool AnalogyGRPCLogClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnalogyGRPCLogClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnalogyGRPCLogClass>(
    AnalogyGRPCLogClass_descriptor(), name, value);
}
enum AnalogyGRPCLogLevel : int {
  UNKNOWN = 0,
  TRACE = 1,
  VERBOSE = 2,
  DEBUG = 3,
  INFORMATION = 4,
  WARNING = 5,
  ERROR = 6,
  CRITICAL = 7,
  ANALOGY = 8,
  NONE = 9,
  AnalogyGRPCLogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnalogyGRPCLogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnalogyGRPCLogLevel_IsValid(int value);
constexpr AnalogyGRPCLogLevel AnalogyGRPCLogLevel_MIN = UNKNOWN;
constexpr AnalogyGRPCLogLevel AnalogyGRPCLogLevel_MAX = NONE;
constexpr int AnalogyGRPCLogLevel_ARRAYSIZE = AnalogyGRPCLogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogyGRPCLogLevel_descriptor();
template<typename T>
inline const std::string& AnalogyGRPCLogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalogyGRPCLogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalogyGRPCLogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnalogyGRPCLogLevel_descriptor(), enum_t_value);
}
inline bool AnalogyGRPCLogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnalogyGRPCLogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnalogyGRPCLogLevel>(
    AnalogyGRPCLogLevel_descriptor(), name, value);
}
// ===================================================================

class AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse();
  explicit AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse& other);
  static const AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse*>(&_AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "greet.AnalogyGRPCLogMessage.AdditionalInformationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "greet.AnalogyGRPCLogMessage.AdditionalInformationEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Analogy_2eproto);
    return ::descriptor_table_Analogy_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class AnalogyGRPCLogMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greet.AnalogyGRPCLogMessage) */ {
 public:
  inline AnalogyGRPCLogMessage() : AnalogyGRPCLogMessage(nullptr) {}
  virtual ~AnalogyGRPCLogMessage();

  AnalogyGRPCLogMessage(const AnalogyGRPCLogMessage& from);
  AnalogyGRPCLogMessage(AnalogyGRPCLogMessage&& from) noexcept
    : AnalogyGRPCLogMessage() {
    *this = ::std::move(from);
  }

  inline AnalogyGRPCLogMessage& operator=(const AnalogyGRPCLogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogyGRPCLogMessage& operator=(AnalogyGRPCLogMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogyGRPCLogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogyGRPCLogMessage* internal_default_instance() {
    return reinterpret_cast<const AnalogyGRPCLogMessage*>(
               &_AnalogyGRPCLogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnalogyGRPCLogMessage& a, AnalogyGRPCLogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogyGRPCLogMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogyGRPCLogMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogyGRPCLogMessage* New() const final {
    return CreateMaybeMessage<AnalogyGRPCLogMessage>(nullptr);
  }

  AnalogyGRPCLogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogyGRPCLogMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogyGRPCLogMessage& from);
  void MergeFrom(const AnalogyGRPCLogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogyGRPCLogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greet.AnalogyGRPCLogMessage";
  }
  protected:
  explicit AnalogyGRPCLogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Analogy_2eproto);
    return ::descriptor_table_Analogy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalInformationFieldNumber = 14,
    kTextFieldNumber = 1,
    kModuleFieldNumber = 6,
    kSourceFieldNumber = 7,
    kMethodNameFieldNumber = 8,
    kFileNameFieldNumber = 9,
    kMachineNameFieldNumber = 11,
    kCategoryFieldNumber = 12,
    kUserFieldNumber = 13,
    kIdFieldNumber = 15,
    kDateFieldNumber = 3,
    kLevelFieldNumber = 2,
    kProcessIdFieldNumber = 4,
    kThreadIdFieldNumber = 5,
    kLineNumberFieldNumber = 10,
    kClassFieldNumber = 16,
  };
  // map<string, string> AdditionalInformation = 14;
  int additionalinformation_size() const;
  private:
  int _internal_additionalinformation_size() const;
  public:
  void clear_additionalinformation();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_additionalinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_additionalinformation();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      additionalinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_additionalinformation();

  // string Text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string Module = 6;
  void clear_module();
  const std::string& module() const;
  void set_module(const std::string& value);
  void set_module(std::string&& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  std::string* mutable_module();
  std::string* release_module();
  void set_allocated_module(std::string* module);
  private:
  const std::string& _internal_module() const;
  void _internal_set_module(const std::string& value);
  std::string* _internal_mutable_module();
  public:

  // string Source = 7;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string MethodName = 8;
  void clear_methodname();
  const std::string& methodname() const;
  void set_methodname(const std::string& value);
  void set_methodname(std::string&& value);
  void set_methodname(const char* value);
  void set_methodname(const char* value, size_t size);
  std::string* mutable_methodname();
  std::string* release_methodname();
  void set_allocated_methodname(std::string* methodname);
  private:
  const std::string& _internal_methodname() const;
  void _internal_set_methodname(const std::string& value);
  std::string* _internal_mutable_methodname();
  public:

  // string FileName = 9;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string MachineName = 11;
  void clear_machinename();
  const std::string& machinename() const;
  void set_machinename(const std::string& value);
  void set_machinename(std::string&& value);
  void set_machinename(const char* value);
  void set_machinename(const char* value, size_t size);
  std::string* mutable_machinename();
  std::string* release_machinename();
  void set_allocated_machinename(std::string* machinename);
  private:
  const std::string& _internal_machinename() const;
  void _internal_set_machinename(const std::string& value);
  std::string* _internal_mutable_machinename();
  public:

  // string Category = 12;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string User = 13;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string Id = 15;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp Date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // .greet.AnalogyGRPCLogLevel Level = 2;
  void clear_level();
  ::greet::AnalogyGRPCLogLevel level() const;
  void set_level(::greet::AnalogyGRPCLogLevel value);
  private:
  ::greet::AnalogyGRPCLogLevel _internal_level() const;
  void _internal_set_level(::greet::AnalogyGRPCLogLevel value);
  public:

  // int32 ProcessId = 4;
  void clear_processid();
  ::PROTOBUF_NAMESPACE_ID::int32 processid() const;
  void set_processid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processid() const;
  void _internal_set_processid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ThreadId = 5;
  void clear_threadid();
  ::PROTOBUF_NAMESPACE_ID::int32 threadid() const;
  void set_threadid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threadid() const;
  void _internal_set_threadid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LineNumber = 10;
  void clear_linenumber();
  ::PROTOBUF_NAMESPACE_ID::int32 linenumber() const;
  void set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linenumber() const;
  void _internal_set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .greet.AnalogyGRPCLogClass Class = 16;
  void clear_class_();
  ::greet::AnalogyGRPCLogClass class_() const;
  void set_class_(::greet::AnalogyGRPCLogClass value);
  private:
  ::greet::AnalogyGRPCLogClass _internal_class_() const;
  void _internal_set_class_(::greet::AnalogyGRPCLogClass value);
  public:

  // @@protoc_insertion_point(class_scope:greet.AnalogyGRPCLogMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AnalogyGRPCLogMessage_AdditionalInformationEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > additionalinformation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr methodname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machinename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_;
  int level_;
  ::PROTOBUF_NAMESPACE_ID::int32 processid_;
  ::PROTOBUF_NAMESPACE_ID::int32 threadid_;
  ::PROTOBUF_NAMESPACE_ID::int32 linenumber_;
  int class__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Analogy_2eproto;
};
// -------------------------------------------------------------------

class AnalogyMessageReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greet.AnalogyMessageReply) */ {
 public:
  inline AnalogyMessageReply() : AnalogyMessageReply(nullptr) {}
  virtual ~AnalogyMessageReply();

  AnalogyMessageReply(const AnalogyMessageReply& from);
  AnalogyMessageReply(AnalogyMessageReply&& from) noexcept
    : AnalogyMessageReply() {
    *this = ::std::move(from);
  }

  inline AnalogyMessageReply& operator=(const AnalogyMessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogyMessageReply& operator=(AnalogyMessageReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogyMessageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogyMessageReply* internal_default_instance() {
    return reinterpret_cast<const AnalogyMessageReply*>(
               &_AnalogyMessageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnalogyMessageReply& a, AnalogyMessageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogyMessageReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogyMessageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogyMessageReply* New() const final {
    return CreateMaybeMessage<AnalogyMessageReply>(nullptr);
  }

  AnalogyMessageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogyMessageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogyMessageReply& from);
  void MergeFrom(const AnalogyMessageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogyMessageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greet.AnalogyMessageReply";
  }
  protected:
  explicit AnalogyMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Analogy_2eproto);
    return ::descriptor_table_Analogy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:greet.AnalogyMessageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Analogy_2eproto;
};
// -------------------------------------------------------------------

class AnalogyConsumerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greet.AnalogyConsumerMessage) */ {
 public:
  inline AnalogyConsumerMessage() : AnalogyConsumerMessage(nullptr) {}
  virtual ~AnalogyConsumerMessage();

  AnalogyConsumerMessage(const AnalogyConsumerMessage& from);
  AnalogyConsumerMessage(AnalogyConsumerMessage&& from) noexcept
    : AnalogyConsumerMessage() {
    *this = ::std::move(from);
  }

  inline AnalogyConsumerMessage& operator=(const AnalogyConsumerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogyConsumerMessage& operator=(AnalogyConsumerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogyConsumerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogyConsumerMessage* internal_default_instance() {
    return reinterpret_cast<const AnalogyConsumerMessage*>(
               &_AnalogyConsumerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnalogyConsumerMessage& a, AnalogyConsumerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogyConsumerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogyConsumerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogyConsumerMessage* New() const final {
    return CreateMaybeMessage<AnalogyConsumerMessage>(nullptr);
  }

  AnalogyConsumerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogyConsumerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogyConsumerMessage& from);
  void MergeFrom(const AnalogyConsumerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogyConsumerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greet.AnalogyConsumerMessage";
  }
  protected:
  explicit AnalogyConsumerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Analogy_2eproto);
    return ::descriptor_table_Analogy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStreamOldMessagesFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool streamOldMessages = 2;
  void clear_streamoldmessages();
  bool streamoldmessages() const;
  void set_streamoldmessages(bool value);
  private:
  bool _internal_streamoldmessages() const;
  void _internal_set_streamoldmessages(bool value);
  public:

  // @@protoc_insertion_point(class_scope:greet.AnalogyConsumerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool streamoldmessages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Analogy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AnalogyGRPCLogMessage

// string Text = 1;
inline void AnalogyGRPCLogMessage::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::text() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Text)
  return _internal_text();
}
inline void AnalogyGRPCLogMessage::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Text)
}
inline std::string* AnalogyGRPCLogMessage::mutable_text() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.Text)
  return _internal_mutable_text();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_text() const {
  return text_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.Text)
}
inline void AnalogyGRPCLogMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.Text)
}
inline void AnalogyGRPCLogMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.Text)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_text() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.Text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.Text)
}

// .greet.AnalogyGRPCLogLevel Level = 2;
inline void AnalogyGRPCLogMessage::clear_level() {
  level_ = 0;
}
inline ::greet::AnalogyGRPCLogLevel AnalogyGRPCLogMessage::_internal_level() const {
  return static_cast< ::greet::AnalogyGRPCLogLevel >(level_);
}
inline ::greet::AnalogyGRPCLogLevel AnalogyGRPCLogMessage::level() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Level)
  return _internal_level();
}
inline void AnalogyGRPCLogMessage::_internal_set_level(::greet::AnalogyGRPCLogLevel value) {
  
  level_ = value;
}
inline void AnalogyGRPCLogMessage::set_level(::greet::AnalogyGRPCLogLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Level)
}

// .google.protobuf.Timestamp Date = 3;
inline bool AnalogyGRPCLogMessage::_internal_has_date() const {
  return this != internal_default_instance() && date_ != nullptr;
}
inline bool AnalogyGRPCLogMessage::has_date() const {
  return _internal_has_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AnalogyGRPCLogMessage::_internal_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AnalogyGRPCLogMessage::date() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Date)
  return _internal_date();
}
inline void AnalogyGRPCLogMessage::unsafe_arena_set_allocated_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greet.AnalogyGRPCLogMessage.Date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnalogyGRPCLogMessage::release_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnalogyGRPCLogMessage::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.Date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_;
  date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnalogyGRPCLogMessage::_internal_mutable_date() {
  
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    date_ = p;
  }
  return date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnalogyGRPCLogMessage::mutable_date() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.Date)
  return _internal_mutable_date();
}
inline void AnalogyGRPCLogMessage::set_allocated_date(PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.Date)
}

// int32 ProcessId = 4;
inline void AnalogyGRPCLogMessage::clear_processid() {
  processid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogyGRPCLogMessage::_internal_processid() const {
  return processid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogyGRPCLogMessage::processid() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.ProcessId)
  return _internal_processid();
}
inline void AnalogyGRPCLogMessage::_internal_set_processid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processid_ = value;
}
inline void AnalogyGRPCLogMessage::set_processid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.ProcessId)
}

// int32 ThreadId = 5;
inline void AnalogyGRPCLogMessage::clear_threadid() {
  threadid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogyGRPCLogMessage::_internal_threadid() const {
  return threadid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogyGRPCLogMessage::threadid() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.ThreadId)
  return _internal_threadid();
}
inline void AnalogyGRPCLogMessage::_internal_set_threadid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threadid_ = value;
}
inline void AnalogyGRPCLogMessage::set_threadid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threadid(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.ThreadId)
}

// string Module = 6;
inline void AnalogyGRPCLogMessage::clear_module() {
  module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::module() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Module)
  return _internal_module();
}
inline void AnalogyGRPCLogMessage::set_module(const std::string& value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Module)
}
inline std::string* AnalogyGRPCLogMessage::mutable_module() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.Module)
  return _internal_mutable_module();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_module() const {
  return module_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_module(const std::string& value) {
  
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_module(std::string&& value) {
  
  module_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.Module)
}
inline void AnalogyGRPCLogMessage::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.Module)
}
inline void AnalogyGRPCLogMessage::set_module(const char* value,
    size_t size) {
  
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.Module)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_module() {
  
  return module_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_module() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.Module)
  return module_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    
  } else {
    
  }
  module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.Module)
}

// string Source = 7;
inline void AnalogyGRPCLogMessage::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::source() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Source)
  return _internal_source();
}
inline void AnalogyGRPCLogMessage::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Source)
}
inline std::string* AnalogyGRPCLogMessage::mutable_source() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.Source)
  return _internal_mutable_source();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_source() const {
  return source_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.Source)
}
inline void AnalogyGRPCLogMessage::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.Source)
}
inline void AnalogyGRPCLogMessage::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.Source)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_source() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.Source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.Source)
}

// string MethodName = 8;
inline void AnalogyGRPCLogMessage::clear_methodname() {
  methodname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::methodname() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.MethodName)
  return _internal_methodname();
}
inline void AnalogyGRPCLogMessage::set_methodname(const std::string& value) {
  _internal_set_methodname(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.MethodName)
}
inline std::string* AnalogyGRPCLogMessage::mutable_methodname() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.MethodName)
  return _internal_mutable_methodname();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_methodname() const {
  return methodname_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_methodname(const std::string& value) {
  
  methodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_methodname(std::string&& value) {
  
  methodname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.MethodName)
}
inline void AnalogyGRPCLogMessage::set_methodname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  methodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.MethodName)
}
inline void AnalogyGRPCLogMessage::set_methodname(const char* value,
    size_t size) {
  
  methodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.MethodName)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_methodname() {
  
  return methodname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_methodname() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.MethodName)
  return methodname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_methodname(std::string* methodname) {
  if (methodname != nullptr) {
    
  } else {
    
  }
  methodname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), methodname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.MethodName)
}

// string FileName = 9;
inline void AnalogyGRPCLogMessage::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::filename() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.FileName)
  return _internal_filename();
}
inline void AnalogyGRPCLogMessage::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.FileName)
}
inline std::string* AnalogyGRPCLogMessage::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.FileName)
  return _internal_mutable_filename();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_filename() const {
  return filename_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.FileName)
}
inline void AnalogyGRPCLogMessage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.FileName)
}
inline void AnalogyGRPCLogMessage::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.FileName)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_filename() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.FileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.FileName)
}

// int32 LineNumber = 10;
inline void AnalogyGRPCLogMessage::clear_linenumber() {
  linenumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogyGRPCLogMessage::_internal_linenumber() const {
  return linenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalogyGRPCLogMessage::linenumber() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.LineNumber)
  return _internal_linenumber();
}
inline void AnalogyGRPCLogMessage::_internal_set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  linenumber_ = value;
}
inline void AnalogyGRPCLogMessage::set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_linenumber(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.LineNumber)
}

// string MachineName = 11;
inline void AnalogyGRPCLogMessage::clear_machinename() {
  machinename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::machinename() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.MachineName)
  return _internal_machinename();
}
inline void AnalogyGRPCLogMessage::set_machinename(const std::string& value) {
  _internal_set_machinename(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.MachineName)
}
inline std::string* AnalogyGRPCLogMessage::mutable_machinename() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.MachineName)
  return _internal_mutable_machinename();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_machinename() const {
  return machinename_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_machinename(const std::string& value) {
  
  machinename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_machinename(std::string&& value) {
  
  machinename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.MachineName)
}
inline void AnalogyGRPCLogMessage::set_machinename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machinename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.MachineName)
}
inline void AnalogyGRPCLogMessage::set_machinename(const char* value,
    size_t size) {
  
  machinename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.MachineName)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_machinename() {
  
  return machinename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_machinename() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.MachineName)
  return machinename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_machinename(std::string* machinename) {
  if (machinename != nullptr) {
    
  } else {
    
  }
  machinename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machinename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.MachineName)
}

// string Category = 12;
inline void AnalogyGRPCLogMessage::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::category() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Category)
  return _internal_category();
}
inline void AnalogyGRPCLogMessage::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Category)
}
inline std::string* AnalogyGRPCLogMessage::mutable_category() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.Category)
  return _internal_mutable_category();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_category() const {
  return category_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_category(const std::string& value) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_category(std::string&& value) {
  
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.Category)
}
inline void AnalogyGRPCLogMessage::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.Category)
}
inline void AnalogyGRPCLogMessage::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.Category)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_category() {
  
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_category() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.Category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.Category)
}

// string User = 13;
inline void AnalogyGRPCLogMessage::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::user() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.User)
  return _internal_user();
}
inline void AnalogyGRPCLogMessage::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.User)
}
inline std::string* AnalogyGRPCLogMessage::mutable_user() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.User)
  return _internal_mutable_user();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_user() const {
  return user_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.User)
}
inline void AnalogyGRPCLogMessage::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.User)
}
inline void AnalogyGRPCLogMessage::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.User)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_user() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.User)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.User)
}

// map<string, string> AdditionalInformation = 14;
inline int AnalogyGRPCLogMessage::_internal_additionalinformation_size() const {
  return additionalinformation_.size();
}
inline int AnalogyGRPCLogMessage::additionalinformation_size() const {
  return _internal_additionalinformation_size();
}
inline void AnalogyGRPCLogMessage::clear_additionalinformation() {
  additionalinformation_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AnalogyGRPCLogMessage::_internal_additionalinformation() const {
  return additionalinformation_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AnalogyGRPCLogMessage::additionalinformation() const {
  // @@protoc_insertion_point(field_map:greet.AnalogyGRPCLogMessage.AdditionalInformation)
  return _internal_additionalinformation();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AnalogyGRPCLogMessage::_internal_mutable_additionalinformation() {
  return additionalinformation_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AnalogyGRPCLogMessage::mutable_additionalinformation() {
  // @@protoc_insertion_point(field_mutable_map:greet.AnalogyGRPCLogMessage.AdditionalInformation)
  return _internal_mutable_additionalinformation();
}

// string Id = 15;
inline void AnalogyGRPCLogMessage::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyGRPCLogMessage::id() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Id)
  return _internal_id();
}
inline void AnalogyGRPCLogMessage::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Id)
}
inline std::string* AnalogyGRPCLogMessage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyGRPCLogMessage.Id)
  return _internal_mutable_id();
}
inline const std::string& AnalogyGRPCLogMessage::_internal_id() const {
  return id_.Get();
}
inline void AnalogyGRPCLogMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyGRPCLogMessage::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyGRPCLogMessage.Id)
}
inline void AnalogyGRPCLogMessage::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyGRPCLogMessage.Id)
}
inline void AnalogyGRPCLogMessage::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyGRPCLogMessage.Id)
}
inline std::string* AnalogyGRPCLogMessage::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyGRPCLogMessage::release_id() {
  // @@protoc_insertion_point(field_release:greet.AnalogyGRPCLogMessage.Id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyGRPCLogMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyGRPCLogMessage.Id)
}

// .greet.AnalogyGRPCLogClass Class = 16;
inline void AnalogyGRPCLogMessage::clear_class_() {
  class__ = 0;
}
inline ::greet::AnalogyGRPCLogClass AnalogyGRPCLogMessage::_internal_class_() const {
  return static_cast< ::greet::AnalogyGRPCLogClass >(class__);
}
inline ::greet::AnalogyGRPCLogClass AnalogyGRPCLogMessage::class_() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyGRPCLogMessage.Class)
  return _internal_class_();
}
inline void AnalogyGRPCLogMessage::_internal_set_class_(::greet::AnalogyGRPCLogClass value) {
  
  class__ = value;
}
inline void AnalogyGRPCLogMessage::set_class_(::greet::AnalogyGRPCLogClass value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyGRPCLogMessage.Class)
}

// -------------------------------------------------------------------

// AnalogyMessageReply

// string message = 1;
inline void AnalogyMessageReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyMessageReply::message() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyMessageReply.message)
  return _internal_message();
}
inline void AnalogyMessageReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyMessageReply.message)
}
inline std::string* AnalogyMessageReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyMessageReply.message)
  return _internal_mutable_message();
}
inline const std::string& AnalogyMessageReply::_internal_message() const {
  return message_.Get();
}
inline void AnalogyMessageReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyMessageReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyMessageReply.message)
}
inline void AnalogyMessageReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyMessageReply.message)
}
inline void AnalogyMessageReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyMessageReply.message)
}
inline std::string* AnalogyMessageReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyMessageReply::release_message() {
  // @@protoc_insertion_point(field_release:greet.AnalogyMessageReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyMessageReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyMessageReply.message)
}

// -------------------------------------------------------------------

// AnalogyConsumerMessage

// string message = 1;
inline void AnalogyConsumerMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnalogyConsumerMessage::message() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyConsumerMessage.message)
  return _internal_message();
}
inline void AnalogyConsumerMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyConsumerMessage.message)
}
inline std::string* AnalogyConsumerMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:greet.AnalogyConsumerMessage.message)
  return _internal_mutable_message();
}
inline const std::string& AnalogyConsumerMessage::_internal_message() const {
  return message_.Get();
}
inline void AnalogyConsumerMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnalogyConsumerMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:greet.AnalogyConsumerMessage.message)
}
inline void AnalogyConsumerMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:greet.AnalogyConsumerMessage.message)
}
inline void AnalogyConsumerMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:greet.AnalogyConsumerMessage.message)
}
inline std::string* AnalogyConsumerMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnalogyConsumerMessage::release_message() {
  // @@protoc_insertion_point(field_release:greet.AnalogyConsumerMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnalogyConsumerMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:greet.AnalogyConsumerMessage.message)
}

// bool streamOldMessages = 2;
inline void AnalogyConsumerMessage::clear_streamoldmessages() {
  streamoldmessages_ = false;
}
inline bool AnalogyConsumerMessage::_internal_streamoldmessages() const {
  return streamoldmessages_;
}
inline bool AnalogyConsumerMessage::streamoldmessages() const {
  // @@protoc_insertion_point(field_get:greet.AnalogyConsumerMessage.streamOldMessages)
  return _internal_streamoldmessages();
}
inline void AnalogyConsumerMessage::_internal_set_streamoldmessages(bool value) {
  
  streamoldmessages_ = value;
}
inline void AnalogyConsumerMessage::set_streamoldmessages(bool value) {
  _internal_set_streamoldmessages(value);
  // @@protoc_insertion_point(field_set:greet.AnalogyConsumerMessage.streamOldMessages)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace greet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::greet::AnalogyGRPCLogClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::greet::AnalogyGRPCLogClass>() {
  return ::greet::AnalogyGRPCLogClass_descriptor();
}
template <> struct is_proto_enum< ::greet::AnalogyGRPCLogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::greet::AnalogyGRPCLogLevel>() {
  return ::greet::AnalogyGRPCLogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Analogy_2eproto
