// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Analogy.proto
#ifndef GRPC_Analogy_2eproto__INCLUDED
#define GRPC_Analogy_2eproto__INCLUDED

#include "Analogy.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace greet {

// The greeting service definition.
class Analogy final {
 public:
  static constexpr char const* service_full_name() {
    return "greet.Analogy";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    std::unique_ptr< ::grpc::ClientWriterInterface< ::greet::AnalogyGRPCLogMessage>> SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::greet::AnalogyGRPCLogMessage>>(SubscribeForPublishingMessagesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::greet::AnalogyGRPCLogMessage>> AsyncSubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::greet::AnalogyGRPCLogMessage>>(AsyncSubscribeForPublishingMessagesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::greet::AnalogyGRPCLogMessage>> PrepareAsyncSubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::greet::AnalogyGRPCLogMessage>>(PrepareAsyncSubscribeForPublishingMessagesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::greet::AnalogyGRPCLogMessage>> SubscribeForConsumingMessages(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::greet::AnalogyGRPCLogMessage>>(SubscribeForConsumingMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greet::AnalogyGRPCLogMessage>> AsyncSubscribeForConsumingMessages(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greet::AnalogyGRPCLogMessage>>(AsyncSubscribeForConsumingMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greet::AnalogyGRPCLogMessage>> PrepareAsyncSubscribeForConsumingMessages(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greet::AnalogyGRPCLogMessage>>(PrepareAsyncSubscribeForConsumingMessagesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::ClientWriteReactor< ::greet::AnalogyGRPCLogMessage>* reactor) = 0;
      #else
      virtual void SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::experimental::ClientWriteReactor< ::greet::AnalogyGRPCLogMessage>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeForConsumingMessages(::grpc::ClientContext* context, ::greet::AnalogyConsumerMessage* request, ::grpc::ClientReadReactor< ::greet::AnalogyGRPCLogMessage>* reactor) = 0;
      #else
      virtual void SubscribeForConsumingMessages(::grpc::ClientContext* context, ::greet::AnalogyConsumerMessage* request, ::grpc::experimental::ClientReadReactor< ::greet::AnalogyGRPCLogMessage>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::greet::AnalogyGRPCLogMessage>* SubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::greet::AnalogyGRPCLogMessage>* AsyncSubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::greet::AnalogyGRPCLogMessage>* PrepareAsyncSubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::greet::AnalogyGRPCLogMessage>* SubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::greet::AnalogyGRPCLogMessage>* AsyncSubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::greet::AnalogyGRPCLogMessage>* PrepareAsyncSubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::greet::AnalogyGRPCLogMessage>> SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::greet::AnalogyGRPCLogMessage>>(SubscribeForPublishingMessagesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>> AsyncSubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>>(AsyncSubscribeForPublishingMessagesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>> PrepareAsyncSubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>>(PrepareAsyncSubscribeForPublishingMessagesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::greet::AnalogyGRPCLogMessage>> SubscribeForConsumingMessages(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::greet::AnalogyGRPCLogMessage>>(SubscribeForConsumingMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>> AsyncSubscribeForConsumingMessages(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>>(AsyncSubscribeForConsumingMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>> PrepareAsyncSubscribeForConsumingMessages(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>>(PrepareAsyncSubscribeForConsumingMessagesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::ClientWriteReactor< ::greet::AnalogyGRPCLogMessage>* reactor) override;
      #else
      void SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::experimental::ClientWriteReactor< ::greet::AnalogyGRPCLogMessage>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeForConsumingMessages(::grpc::ClientContext* context, ::greet::AnalogyConsumerMessage* request, ::grpc::ClientReadReactor< ::greet::AnalogyGRPCLogMessage>* reactor) override;
      #else
      void SubscribeForConsumingMessages(::grpc::ClientContext* context, ::greet::AnalogyConsumerMessage* request, ::grpc::experimental::ClientReadReactor< ::greet::AnalogyGRPCLogMessage>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::greet::AnalogyGRPCLogMessage>* SubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response) override;
    ::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>* AsyncSubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>* PrepareAsyncSubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::greet::AnalogyGRPCLogMessage>* SubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request) override;
    ::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>* AsyncSubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>* PrepareAsyncSubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeForPublishingMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeForConsumingMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SubscribeForPublishingMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* reader, ::greet::AnalogyMessageReply* response);
    virtual ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* context, const ::greet::AnalogyConsumerMessage* request, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeForPublishingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeForPublishingMessages() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeForPublishingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForPublishingMessages(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* /*reader*/, ::greet::AnalogyMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeForPublishingMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::greet::AnalogyMessageReply, ::greet::AnalogyGRPCLogMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeForConsumingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeForConsumingMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubscribeForConsumingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeForConsumingMessages(::grpc::ServerContext* context, ::greet::AnalogyConsumerMessage* request, ::grpc::ServerAsyncWriter< ::greet::AnalogyGRPCLogMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeForPublishingMessages<WithAsyncMethod_SubscribeForConsumingMessages<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeForPublishingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeForPublishingMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::greet::AnalogyGRPCLogMessage, ::greet::AnalogyMessageReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::greet::AnalogyMessageReply* response) { return this->SubscribeForPublishingMessages(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeForPublishingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForPublishingMessages(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* /*reader*/, ::greet::AnalogyMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::greet::AnalogyGRPCLogMessage>* SubscribeForPublishingMessages(
      ::grpc::CallbackServerContext* /*context*/, ::greet::AnalogyMessageReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::greet::AnalogyGRPCLogMessage>* SubscribeForPublishingMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::greet::AnalogyMessageReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeForConsumingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeForConsumingMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::greet::AnalogyConsumerMessage, ::greet::AnalogyGRPCLogMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::greet::AnalogyConsumerMessage* request) { return this->SubscribeForConsumingMessages(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeForConsumingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::greet::AnalogyGRPCLogMessage>* SubscribeForConsumingMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::greet::AnalogyGRPCLogMessage>* SubscribeForConsumingMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubscribeForPublishingMessages<ExperimentalWithCallbackMethod_SubscribeForConsumingMessages<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubscribeForPublishingMessages<ExperimentalWithCallbackMethod_SubscribeForConsumingMessages<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeForPublishingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeForPublishingMessages() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeForPublishingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForPublishingMessages(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* /*reader*/, ::greet::AnalogyMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeForConsumingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeForConsumingMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubscribeForConsumingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeForPublishingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeForPublishingMessages() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeForPublishingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForPublishingMessages(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* /*reader*/, ::greet::AnalogyMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeForPublishingMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeForConsumingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeForConsumingMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubscribeForConsumingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeForConsumingMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeForPublishingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeForPublishingMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->SubscribeForPublishingMessages(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeForPublishingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForPublishingMessages(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* /*reader*/, ::greet::AnalogyMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SubscribeForPublishingMessages(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* SubscribeForPublishingMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeForConsumingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeForConsumingMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeForConsumingMessages(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeForConsumingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeForConsumingMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeForConsumingMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeForConsumingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeForConsumingMessages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::greet::AnalogyConsumerMessage, ::greet::AnalogyGRPCLogMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::greet::AnalogyConsumerMessage, ::greet::AnalogyGRPCLogMessage>* streamer) {
                       return this->StreamedSubscribeForConsumingMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeForConsumingMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeForConsumingMessages(::grpc::ServerContext* /*context*/, const ::greet::AnalogyConsumerMessage* /*request*/, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeForConsumingMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::greet::AnalogyConsumerMessage,::greet::AnalogyGRPCLogMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeForConsumingMessages<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeForConsumingMessages<Service > StreamedService;
};

}  // namespace greet


#endif  // GRPC_Analogy_2eproto__INCLUDED
