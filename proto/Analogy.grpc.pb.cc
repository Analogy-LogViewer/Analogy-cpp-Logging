// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Analogy.proto

#include "Analogy.pb.h"
#include "Analogy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace greet {

static const char* Analogy_method_names[] = {
  "/greet.Analogy/SubscribeForPublishingMessages",
  "/greet.Analogy/SubscribeForConsumingMessages",
};

std::unique_ptr< Analogy::Stub> Analogy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Analogy::Stub> stub(new Analogy::Stub(channel));
  return stub;
}

Analogy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubscribeForPublishingMessages_(Analogy_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SubscribeForConsumingMessages_(Analogy_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::greet::AnalogyGRPCLogMessage>* Analogy::Stub::SubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::greet::AnalogyGRPCLogMessage>::Create(channel_.get(), rpcmethod_SubscribeForPublishingMessages_, context, response);
}

void Analogy::Stub::experimental_async::SubscribeForPublishingMessages(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::experimental::ClientWriteReactor< ::greet::AnalogyGRPCLogMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::greet::AnalogyGRPCLogMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeForPublishingMessages_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>* Analogy::Stub::AsyncSubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::greet::AnalogyGRPCLogMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeForPublishingMessages_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::greet::AnalogyGRPCLogMessage>* Analogy::Stub::PrepareAsyncSubscribeForPublishingMessagesRaw(::grpc::ClientContext* context, ::greet::AnalogyMessageReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::greet::AnalogyGRPCLogMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeForPublishingMessages_, context, response, false, nullptr);
}

::grpc::ClientReader< ::greet::AnalogyGRPCLogMessage>* Analogy::Stub::SubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::greet::AnalogyGRPCLogMessage>::Create(channel_.get(), rpcmethod_SubscribeForConsumingMessages_, context, request);
}

void Analogy::Stub::experimental_async::SubscribeForConsumingMessages(::grpc::ClientContext* context, ::greet::AnalogyConsumerMessage* request, ::grpc::experimental::ClientReadReactor< ::greet::AnalogyGRPCLogMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::greet::AnalogyGRPCLogMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeForConsumingMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>* Analogy::Stub::AsyncSubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::greet::AnalogyGRPCLogMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeForConsumingMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::greet::AnalogyGRPCLogMessage>* Analogy::Stub::PrepareAsyncSubscribeForConsumingMessagesRaw(::grpc::ClientContext* context, const ::greet::AnalogyConsumerMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::greet::AnalogyGRPCLogMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeForConsumingMessages_, context, request, false, nullptr);
}

Analogy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Analogy_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Analogy::Service, ::greet::AnalogyGRPCLogMessage, ::greet::AnalogyMessageReply>(
          [](Analogy::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::greet::AnalogyGRPCLogMessage>* reader,
             ::greet::AnalogyMessageReply* resp) {
               return service->SubscribeForPublishingMessages(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Analogy_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Analogy::Service, ::greet::AnalogyConsumerMessage, ::greet::AnalogyGRPCLogMessage>(
          [](Analogy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greet::AnalogyConsumerMessage* req,
             ::grpc::ServerWriter<::greet::AnalogyGRPCLogMessage>* writer) {
               return service->SubscribeForConsumingMessages(ctx, req, writer);
             }, this)));
}

Analogy::Service::~Service() {
}

::grpc::Status Analogy::Service::SubscribeForPublishingMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::greet::AnalogyGRPCLogMessage>* reader, ::greet::AnalogyMessageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Analogy::Service::SubscribeForConsumingMessages(::grpc::ServerContext* context, const ::greet::AnalogyConsumerMessage* request, ::grpc::ServerWriter< ::greet::AnalogyGRPCLogMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace greet

